/*
Deployment script for Hisab4

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Hisab4"
:setvar DefaultFilePrefix "Hisab4"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.CHINTS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.CHINTS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key 081e2f35-9538-4980-b143-c96a9069cc7f is skipped, element [dbo].[Table1].[Id] (SqlSimpleColumn) will not be renamed to AccountId';


GO
PRINT N'Rename refactoring operation with key 5ebbd562-1621-4e6a-9480-2a4d1a78d224 is skipped, element [dbo].[EventAccount].[AccountType] (SqlSimpleColumn) will not be renamed to AccountTypeId';


GO
PRINT N'Rename refactoring operation with key 6e6348b5-3d84-4510-aaa2-fb073f89116b is skipped, element [dbo].[ApplicationUserRole].[Id] (SqlSimpleColumn) will not be renamed to UserId';


GO
PRINT N'Rename refactoring operation with key 58375028-016b-4810-9539-9f19592b135c is skipped, element [dbo].[Event].[LastModfiedDate] (SqlSimpleColumn) will not be renamed to LastModifiedDate';


GO
PRINT N'Rename refactoring operation with key cb2f2fb4-eb69-4315-98f0-45517bf96421 is skipped, element [dbo].[EventFriend].[Id] (SqlSimpleColumn) will not be renamed to EventId';


GO
PRINT N'Rename refactoring operation with key d3891a06-30c8-4b0d-aee8-7102e1411130 is skipped, element [dbo].[EventFriend].[FriendEmail] (SqlSimpleColumn) will not be renamed to FriendId';


GO
PRINT N'Creating [dbo].[AccountType]...';


GO
CREATE TABLE [dbo].[AccountType] (
    [Id]   INT          NOT NULL,
    [Name] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ApplicationRole]...';


GO
CREATE TABLE [dbo].[ApplicationRole] (
    [Id]             INT            NOT NULL,
    [Name]           NVARCHAR (256) NOT NULL,
    [NormalizedName] NVARCHAR (256) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ApplicationRole].[IX_ApplicationRole_NormalizedName]...';


GO
CREATE NONCLUSTERED INDEX [IX_ApplicationRole_NormalizedName]
    ON [dbo].[ApplicationRole]([NormalizedName] ASC);


GO
PRINT N'Creating [dbo].[ApplicationUser]...';


GO
CREATE TABLE [dbo].[ApplicationUser] (
    [Id]                   INT            IDENTITY (1, 1) NOT NULL,
    [UserName]             NVARCHAR (256) NOT NULL,
    [NormalizedUserName]   NVARCHAR (256) NOT NULL,
    [Email]                NVARCHAR (256) NULL,
    [NormalizedEmail]      NVARCHAR (256) NULL,
    [EmailConfirmed]       BIT            NOT NULL,
    [PasswordHash]         NVARCHAR (MAX) NULL,
    [PhoneNumber]          NVARCHAR (50)  NULL,
    [PhoneNumberConfirmed] BIT            NOT NULL,
    [TwoFactorEnabled]     BIT            NOT NULL,
    [NickName]             NCHAR (256)    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ApplicationUser].[IX_ApplicationUser_NormalizedUserName]...';


GO
CREATE NONCLUSTERED INDEX [IX_ApplicationUser_NormalizedUserName]
    ON [dbo].[ApplicationUser]([NormalizedUserName] ASC);


GO
PRINT N'Creating [dbo].[ApplicationUserRole]...';


GO
CREATE TABLE [dbo].[ApplicationUserRole] (
    [UserId] INT NOT NULL,
    [RoleId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[Event]...';


GO
CREATE TABLE [dbo].[Event] (
    [Id]               INT          IDENTITY (1, 1) NOT NULL,
    [UserId]           INT          NOT NULL,
    [Name]             VARCHAR (50) NOT NULL,
    [CreateDate]       DATETIME     NULL,
    [LastModifiedDate] DATETIME     NULL,
    CONSTRAINT [PK_Event] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EventFriend]...';


GO
CREATE TABLE [dbo].[EventFriend] (
    [EventId]   INT           NOT NULL,
    [Email]     VARCHAR (200) NOT NULL,
    [NickName]  VARCHAR (200) NOT NULL,
    [Status]    INT           NOT NULL,
    [AppUserId] INT           NULL,
    CONSTRAINT [PK_EventFriend] PRIMARY KEY CLUSTERED ([EventId] ASC, [Email] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[ApplicationUser]...';


GO
ALTER TABLE [dbo].[ApplicationUser]
    ADD DEFAULT user FOR [NickName];


GO
PRINT N'Creating [dbo].[FK_ApplicationUserRole_ApplicationUser]...';


GO
ALTER TABLE [dbo].[ApplicationUserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_ApplicationUserRole_ApplicationUser] FOREIGN KEY ([UserId]) REFERENCES [dbo].[ApplicationUser] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ApplicationUserRole_ApplicationRole]...';


GO
ALTER TABLE [dbo].[ApplicationUserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_ApplicationUserRole_ApplicationRole] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[ApplicationRole] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Event_User]...';


GO
ALTER TABLE [dbo].[Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[ApplicationUser] ([Id]);


GO
PRINT N'Creating [dbo].[FK_EventFriend_Event]...';


GO
ALTER TABLE [dbo].[EventFriend] WITH NOCHECK
    ADD CONSTRAINT [FK_EventFriend_Event] FOREIGN KEY ([EventId]) REFERENCES [dbo].[Event] ([Id]);


GO
PRINT N'Creating [dbo].[FK_EventFriend_AppUser]...';


GO
ALTER TABLE [dbo].[EventFriend] WITH NOCHECK
    ADD CONSTRAINT [FK_EventFriend_AppUser] FOREIGN KEY ([AppUserId]) REFERENCES [dbo].[ApplicationUser] ([Id]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '081e2f35-9538-4980-b143-c96a9069cc7f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('081e2f35-9538-4980-b143-c96a9069cc7f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5ebbd562-1621-4e6a-9480-2a4d1a78d224')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5ebbd562-1621-4e6a-9480-2a4d1a78d224')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6e6348b5-3d84-4510-aaa2-fb073f89116b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6e6348b5-3d84-4510-aaa2-fb073f89116b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '58375028-016b-4810-9539-9f19592b135c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('58375028-016b-4810-9539-9f19592b135c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cb2f2fb4-eb69-4315-98f0-45517bf96421')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cb2f2fb4-eb69-4315-98f0-45517bf96421')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd3891a06-30c8-4b0d-aee8-7102e1411130')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d3891a06-30c8-4b0d-aee8-7102e1411130')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

if((select count(*) from AccountType ) = 0)
Begin

INSERT INTO [dbo].[AccountType] ([Id] ,[Name]) VALUES (1,'Asset')
INSERT INTO [dbo].[AccountType] ([Id] ,[Name]) VALUES (2,'Liability')
End

if((select count(*) from ApplicationRole ) = 0)
BEGIN

INSERT INTO [dbo].[ApplicationRole] ([Id] ,[Name] ,[NormalizedName]) VALUES
           (1 ,'Admin' ,'ADMIN')

INSERT INTO [dbo].[ApplicationRole] ([Id] ,[Name] ,[NormalizedName]) VALUES
           (2 ,'App User' ,'APPLICATION USER')



END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[ApplicationUserRole] WITH CHECK CHECK CONSTRAINT [FK_ApplicationUserRole_ApplicationUser];

ALTER TABLE [dbo].[ApplicationUserRole] WITH CHECK CHECK CONSTRAINT [FK_ApplicationUserRole_ApplicationRole];

ALTER TABLE [dbo].[Event] WITH CHECK CHECK CONSTRAINT [FK_Event_User];

ALTER TABLE [dbo].[EventFriend] WITH CHECK CHECK CONSTRAINT [FK_EventFriend_Event];

ALTER TABLE [dbo].[EventFriend] WITH CHECK CHECK CONSTRAINT [FK_EventFriend_AppUser];


GO
PRINT N'Update complete.';


GO
